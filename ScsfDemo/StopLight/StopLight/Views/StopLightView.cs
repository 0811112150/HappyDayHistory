//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using ScsfDemo.Infrastructure.Interface;
using System.Drawing;
using System.ComponentModel;
using System.Collections.Generic;

namespace ScsfDemo.StopLight
{
	public partial class StopLightView : UserControl, IStopLightView
	{
		public StopLightView()
		{
			InitializeComponent();
		}

		/// <summary>
		/// 在 View 加载时允许 Presenter 注入适当的操作。开发者可以在 Presenter 中重写 OnViewReady() 介入视图加载过程。
		/// </summary>
		/// <param name="e"></param>
		protected override void OnLoad(EventArgs e)
		{
			_presenter.OnViewReady();
			base.OnLoad(e);
		}

		#region IStoplightView Members

		/// <summary>
		/// 当前颜色改变时，触发 PropertyChanged 事件
		/// </summary>
		public Color CurrentColor
		{
			get { return stopLightPanel.BackColor; }
			set
			{
				stopLightPanel.BackColor = value;
				RaisePropertyChanged(StoplightViewProperties.CurrentColor);
			}
		}

		/// <summary>
		/// 获取或设置绿色持续时间 GreenDuration
		/// 当 GreenDuration 改变时，触发 PropertyChanged 事件
		/// </summary>
		public string GreenDuration
		{
			get { return greenDurationTextBox.Text; }
			set
			{
				greenDurationTextBox.Text = value;
				RaisePropertyChanged(StopLightView.Properties.GreenDuration);
			}
		}

		/// <summary>
		/// 获取或设置黄色持续时间 YellowDuration
		/// 当前 YellowDuration 改变时，触发 PropertyChanged 事件
		/// </summary>
		public string YellowDuration
		{
			get { return yellowDurationTextBox.Text; }
			set
			{
				yellowDurationTextBox.Text = value;
				RaisePropertyChanged(StoplightViewProperties.YellowDuration);
			}
		}

		/// <summary>
		/// 获取或设置红色持续时间 RedDuration
		/// 当前 RedDuration 改变时，触发 PropertyChanged 事件
		/// </summary>
		public string RedDuration
		{
			get { return redDurationTextBox.Text; }
			set
			{
				redDurationTextBox.Text = value;
				RaisePropertyChanged(StoplightViewProperties.RedDuration);
			}
		}

		/// <summary>
		/// 当点击 update schedule 按钮时触发，更改三种颜色的持续时间
		/// 在 Presenter 的 OnViewSet() 方法中注册
		/// </summary>
		public event EventHandler UpdateClicked;

		/// <summary>
		/// 当点击强制更改到下一颜色时触发
		/// 在 Presenter 的 OnViewSet() 方法中注册
		/// </summary>
		public event EventHandler ForceChangeClicked;

		/// <summary>
		/// 通过 ErrorProvider 给对应控件设置错误提示
		/// Presenter 在处理属性更改事件时调用
		/// </summary>
		/// <param name="propertyName"></param>
		/// <param name="errorMessage"></param>
		public void SetError(string propertyName, string errorMessage)
		{
			Dictionary<string, Control> controlsByName = new Dictionary<string, Control>();
			controlsByName.Add(StoplightViewProperties.GreenDuration, greenDurationTextBox);
			controlsByName.Add(StoplightViewProperties.YellowDuration, yellowDurationTextBox);
			controlsByName.Add(StoplightViewProperties.RedDuration, redDurationTextBox);


			if (controlsByName.ContainsKey(propertyName)) {
				errorProvider.SetError(controlsByName[propertyName], errorMessage);
			}
		}

		#endregion

		/// <summary>
		/// 控件属性更改时触发
		/// 在 Presenter 的 OnViewSet() 方法中注册
		/// </summary>
		public event PropertyChangedEventHandler PropertyChanged;
		// Event firing helpers

		protected virtual void RaisePropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handlers = PropertyChanged;
			if (handlers != null) {
				handlers(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected virtual void RaiseUpdateClicked()
		{
			EventHandler handlers = UpdateClicked;
			if (handlers != null) {
				handlers(this, EventArgs.Empty);
			}
		}

		protected virtual void RaiseForceChangeClicked()
		{
			EventHandler handlers = ForceChangeClicked;
			if (handlers != null) {
				handlers(this, EventArgs.Empty);
			}
		}

		private void updateScheduleButton_Click(object sender, EventArgs e)
		{
			RaiseUpdateClicked();
		}


		private void forceChangeButton_Click(object sender, EventArgs e)
		{
			RaiseForceChangeClicked();
		}
	}
}

